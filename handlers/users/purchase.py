from aiogram import types
from aiogram.utils.markdown import hlink

from keyboards.inline.purchase_keyboards import purschase_keyboard, show_purchases, change_status, status_change, \
    purschase_keyboard_complete, show_purchases_complete, complete_order_keyboard, delete_complete_order
from loader import dp
from utils.db_api.commands import select_staff_manager, select_staff_admin, get_purchases_id, \
    get_purchases_change_status, purchases_status_successful, get_purchases_complete_id, delete_complete_order_command


# –°–ü–ò–°–û–ö –ê–ö–¢–ò–í–ù–´–• –ó–ê–ö–ê–ó–û–í
@dp.message_handler(text='üü° –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã')
async def purschase(msg: types.Message):
    for i in await select_staff_manager():
        if msg.from_user.id == i.user_id:
            markup = await purschase_keyboard()
            await msg.answer('–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', reply_markup=markup)
        else:
            pass
    for a in await select_staff_admin():
        if msg.from_user.id == a.user_id:
            markup = await purschase_keyboard()
            await msg.answer('–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', reply_markup=markup)


# –°–ü–ò–°–û–ö –í–´–ü–û–õ–ù–ï–ù–´–• –ó–ê–ö–ê–ó–û–í
@dp.message_handler(text='üü° –í—ã–ø–æ–ª–Ω–µ–Ω—ã–µ –∑–∞–∫–∞–∑—ã')
async def purschase_complete(msg: types.Message):
    for i in await select_staff_manager():
        if msg.from_user.id == i.user_id:
            markup = await purschase_keyboard_complete()
            await msg.answer('–°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', reply_markup=markup)
        else:
            pass
    for a in await select_staff_admin():
        if msg.from_user.id == a.user_id:
            markup = await purschase_keyboard_complete()
            await msg.answer('–°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', reply_markup=markup)


# –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ó–ê–ö–ê–ó–ï
@dp.callback_query_handler(show_purchases.filter())
async def navigate(call: types.CallbackQuery, callback_data=dict):
    item_id = callback_data.get('item_id')
    order = await get_purchases_id(int(item_id))
    link = hlink('–ö–ª–∏–∫', url=f'tg://user?id={order.user_id}')
    text = f"""
–¢–æ–≤–∞—Ä:{order.name}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.quantity}
–°—Ç–∞—Ç—É—Å: {order.status}
–°—É–º–º–∞: {order.sum}
–¢–µ–ª–µ—Ñ–æ–Ω: {order.number}
–õ–æ–≥–∏–Ω: @{order.login}
–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - {link}
        """
    await call.message.edit_text(text=text, reply_markup=change_status(item_id=item_id))


# –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–´–ü–û–õ–ù–ï–ù–û–ú –ó–ê–ö–ê–ó–ï
@dp.callback_query_handler(show_purchases_complete.filter())
async def navigate(call: types.CallbackQuery, callback_data=dict):
    item_id = callback_data.get('item_id')
    order = await get_purchases_complete_id(int(item_id))
    link = hlink('–ö–ª–∏–∫', url=f'tg://user?id={order.user_id}')
    text = f"""
–¢–æ–≤–∞—Ä:{order.name}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.quantity}
–°—Ç–∞—Ç—É—Å: {order.status}
–°—É–º–º–∞: {order.sum}
–¢–µ–ª–µ—Ñ–æ–Ω: {order.number}
–õ–æ–≥–∏–Ω:  @{order.login}
–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - {link}
        """
    await call.message.edit_text(text=text, reply_markup=complete_order_keyboard(int(item_id)))


# –í–´–•–û–î –ò–ó –ú–ï–ù–Æ
@dp.callback_query_handler(text='back_purchase_all_menu:noncomplete')
async def back_purchase(call: types.CallbackQuery):
    markup = await purschase_keyboard()
    await call.message.edit_text(text='–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', reply_markup=markup)


# –í–´–•–û–î –ò–ó –ú–ï–ù–Æ
@dp.callback_query_handler(text='back_purchase_all_menu:complete')
async def back_purchase(call: types.CallbackQuery):
    markup = await purschase_keyboard_complete()
    await call.message.edit_text(text='–°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', reply_markup=markup)


# –ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ó–ê–ö–ê–ó–ê
@dp.callback_query_handler(status_change.filter())
async def change_stat(call: types.CallbackQuery, callback_data=dict):
    item_id = callback_data.get('item_id')
    change_status_name = callback_data.get('status_name')
    order = await get_purchases_id(int(item_id))
    if change_status_name == 'successful':
        await purchases_status_successful(id=int(item_id), name=order.name, quantity=order.quantity, status='–í—ã–ø–æ–ª–Ω–µ–Ω',
                                          sum=order.sum, number=order.number, login=order.login, user_id=order.user_id)
        await call.answer(text='–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–í—ã–ø–æ–ª–Ω–µ–Ω"', show_alert=True)
        markup = await purschase_keyboard()
        await call.message.edit_text(text='–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', reply_markup=markup)
    elif change_status_name == 'processed':
        await get_purchases_change_status(id=int(item_id), status='–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è')
        await call.answer(text='–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"', show_alert=True)


# –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
@dp.callback_query_handler(delete_complete_order.filter())
async def delete_complete(call: types.CallbackQuery, callback_data=dict):
    item_id = callback_data.get('item_id')
    await delete_complete_order_command(int(item_id))
    markup = await purschase_keyboard_complete()
    await call.message.edit_text(text='–°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', reply_markup=markup)
    await call.answer(text='–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω', show_alert=True)

# –º–µ–Ω—é
